{"version":3,"sources":["../src/index.ts","../src/Emitter.ts","../src/util.ts","../src/PostMessage.ts"],"sourcesContent":["export { default as Emitter } from './Emitter';\r\nexport { default as PostMessage } from './PostMessage';\r\n","/**\r\n * 事件收集管理\r\n */\r\nexport default class Emitter {\r\n  _events: Map<string, Set<Function>>\r\n\r\n  constructor() {\r\n    this._events = new Map()\r\n  }\r\n  off(evtName: string, fn?: Function) {\r\n    const target = this._events.get(evtName)\r\n    if (!target) {\r\n      return\r\n    }\r\n    if (fn) {\r\n      target.delete(fn)\r\n    } else {\r\n      Array.from(target).forEach((fn) => target.delete(fn))\r\n    }\r\n  }\r\n  offAll() {\r\n    for (let evtName of this._events.keys()) {\r\n      this.off(evtName)\r\n    }\r\n  }\r\n  on(evtName: string, fn: Function) {\r\n    let target = this._events.get(evtName)\r\n    if (!target) {\r\n      this._events.set(evtName, (target = new Set()))\r\n    }\r\n    target.add(fn)\r\n\r\n    return this\r\n  }\r\n  trigger(evtName: string, param: unknown) {\r\n    const target = this._events.get(evtName)\r\n    if (target) return Promise.all(Array.from(target).map((fn) => fn(param)))\r\n  }\r\n  listen(listeners: Record<string, Function>) {\r\n    for (let key in listeners) {\r\n      this.on(key, listeners[key])\r\n    }\r\n    return this\r\n  }\r\n}\r\n","export const warn = (...args: unknown[]) =>\r\n  console.warn(`PostMessage Warn:`, ...args)\r\n\r\nexport const isThenable = (val: unknown) => !!(val && !!(val as any)?.then)\r\n","import { warn, isThenable } from './util'\r\nimport Emitter from './Emitter'\r\n\r\nexport interface PostMessageOptions {\r\n  name?: string // 当前窗口名字\r\n  filterSources?: string[] // 和name搭配使用，过滤消息来源\r\n}\r\n\r\ntype MessageListener = (event: {\r\n  data: { source: PostMessageOptions['name']; type: string; data: unknown }\r\n}) => void\r\n\r\nexport default class PostMessage extends Emitter {\r\n  target\r\n  options\r\n  exposes: Set<string>\r\n\r\n  private messageListener: MessageListener\r\n\r\n  constructor(target: Window, options?: PostMessageOptions) {\r\n    super()\r\n    this.target = target\r\n    this.options = options || {}\r\n\r\n    // 保存其他window暴露的方法名\r\n    this.exposes = new Set()\r\n\r\n    // 监听其他window调用expose方法暴露相关的方法给自己\r\n    this.on('onAddExpose', (keys: string[]) => {\r\n      keys.forEach((key) => {\r\n        // 方法名称重复则覆盖给出提示\r\n        if (this.exposes.has(key)) {\r\n          warn(\r\n            `The method: ${key} already exists. Please modify the name, otherwise it will be overwritten`\r\n          )\r\n        }\r\n        this.exposes.add(key)\r\n      })\r\n    })\r\n\r\n    this.messageListener = (event) => {\r\n      const message = event.data\r\n      if (!message) {\r\n        return\r\n      }\r\n\r\n      if (\r\n        !this.options.filterSources ||\r\n        (Array.isArray(this.options.filterSources) &&\r\n          this.options.filterSources.length &&\r\n          message.source &&\r\n          this.options.filterSources.includes(message.source))\r\n      ) {\r\n        console.log(`message`, message, this._events, this.exposes)\r\n        const { type, data } = message\r\n        this.trigger(type, data)\r\n      }\r\n    }\r\n\r\n    // 统一监听\r\n    target.addEventListener('message', this.messageListener, false)\r\n  }\r\n\r\n  removeAllListeners() {\r\n    this.offAll()\r\n    this.target.removeEventListener('message', this.messageListener)\r\n  }\r\n\r\n  // 事件通知\r\n  send(type: string, data: unknown, target: Window) {\r\n    const _target = target || this.target\r\n    const message = {\r\n      type,\r\n      data,\r\n      source: this.options.name,\r\n    }\r\n    _target.postMessage(message, '*')\r\n  }\r\n\r\n  /**\r\n   * 暴露方法或者变量给其他iframe\r\n   * @param {object} obj 暴露的方法或者变量\r\n   * @param {Window} target 暴露给那个window\r\n   */\r\n  expose(obj: Record<string, Function>, target: Window) {\r\n    if (toString.call(obj) !== '[object Object]') {\r\n      console.log('expose accept a object')\r\n      return\r\n    }\r\n    const keys = Object.keys(obj)\r\n    this.send('onAddExpose', keys, target)\r\n    keys.forEach((name) => {\r\n      // 同一个类型的方法只能有一个回调\r\n      this.off(name)\r\n      this.on(name, async (param: unknown) => {\r\n        const value = obj[name]\r\n        let data\r\n        if (typeof value === 'function') {\r\n          const res = value(param)\r\n          if (isThenable(res)) {\r\n            data = await res\r\n          } else {\r\n            data = res\r\n          }\r\n        } else {\r\n          data = value\r\n        }\r\n        this.send(name, data, target)\r\n      })\r\n    })\r\n  }\r\n  // 判断是否暴露了方法\r\n  hasExpose(name: string) {\r\n    return this.exposes.has(name)\r\n  }\r\n  /**\r\n   * 访问iframe提供方法和变量\r\n   * @param {string} name 暴露的方法名或者变量名\r\n   * @param {any} param 方法参数\r\n   * @param {Window} target 访问用那个\r\n   * @returns\r\n   */\r\n  invoke(name: string, param: unknown, target: Window) {\r\n    if (!this.hasExpose(name)) {\r\n      // warn(`not found invoke: ${name}`)\r\n      return\r\n    }\r\n    return new Promise((resolve) => {\r\n      // 同一个类型的方法只能有一个回调\r\n      this.off(name)\r\n      this.on(name, (data: unknown) => {\r\n        resolve(data)\r\n      })\r\n      this.send(name, param, target)\r\n    })\r\n  }\r\n}\r\n"],"mappings":"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","names":["src_exports","__export","Emitter","PostMessage","__toCommonJS","Emitter","evtName","fn","target","param","listeners","key","warn","args","isThenable","val","PostMessage","Emitter","target","options","keys","key","warn","event","message","type","data","_target","obj","name","param","value","res","isThenable","resolve"]}